class Solution:
    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:
        '''
        題目中digits 不會有零!!
        假設有K 位數，可以確定 k後面 位數的總類應該是 len(digits)**(k-1)(少1位數)+len(digits)**(k-2)(少兩位數)...直到k=0
        所以需要處理的應該是 k 位數下，最多有幾個digits >使用動態分析
        ["1","3","6","8"] 6789
        三位數的可能性為 4+ 4*4+4*4*4
        dp[0], dp[1], dp[2], dp[3]分别表示小于等于 6789, 789, 89, 9 的合法数的个数
        dp[4] = 1 (假設最後一位數字是9 則因為沒有比9小的後一位 所以賦予它1)
        
        9:小於9的  4個
        8:3 * 4  + 4(當十位數是8的時候可以再加入尾數4個
        7:3*4*4 
        6:2*4*4*4 + 3*4*4(當開頭可以是6的時候，就要在加上上一位數的可能性)
        
        所以四位數的組合有176種 
        
        '''
        ls = len(str(n))  #先N是幾位數
        s = str(n)  #將N給拆解，可以先從最大位數比大小
        ld = len(digits)
        dp = [0] * ls + [1]
        
        for i in range(ls-1,-1,-1): #range(start, stop , step) !!!!!stop -1 代表在-1 之前所以是零  ls-1 是因為 3-0剛好四個數字
            for d in digits:
                if d < s[i]:
                    dp[i] = ld**(ls-i-1) + dp[i]
                elif d == s[i]:
                    dp[i] = dp[i]+dp[i+1]      
        print(dp)
        return dp[0] + sum(ld ** i for i in range(1, ls))
