class Solution:
    def longestPalindrome(self, s: str) -> str:
        '''
        做出一個stack 然後將未出現的儲存進去，再一一檢視，如果再次重複出現，就將其與之前的都return
        
        stack = ""
        for i in range(len(s)):
            if s[i] not in stack:
                stack = stack + s[i]
            elif (s[i] in stack ):
                for j in range(len(s)-i):   #處理有aaaa 這樣的情況，如果與之後的都一樣，就在stack 上面再加入s[i]
                    if s[i] == s[i+j]:
                        stack = stack + s[i]
                return (stack[stack.index(s[i]):])
            if stack == s:                 #字母求完後都不同的情向
                return (stack[0])
                
        缺點：
        上面這個做法 不能處理兩個字母以上的回文，且會只對重複一次有反應
        例如abcba > output 會是bcb 而非 abcba
            "abcab" output 會是 "abca" 而非a
        ///////////
        
        先判斷字串是否是回文或是小於等於2 或是顛倒過後一樣 是的話就直接回傳就好
        再來判斷數據中奇數開始與偶數開始
        奇數開始大於等於0 且相反一樣，則回文開始是奇數開始
        偶數開始大於等於零，且相反一樣，則回文是偶數開始
        
        '''
        strlen = len(s)
        # if length of string < 2 or s is palindrome already
        if strlen < 2 or s == s[::-1]:
            return s

        start, maxlen = 0, 1

        for i in range(strlen):
            oddstart  = i - maxlen - 1
            evenstart = i - maxlen
            odd  = s[oddstart:i+1]  # len(odd)  = maxlen + 2
            even = s[evenstart:i+1] # len(even) = maxlen + 1
                #i = 2
                #maxlen = 1
                #start = 0
                #odd = s[2-1-1:3]….bab
                #even = s[1:3]…ab
            if oddstart >= 0 and odd == odd[::-1]:
                start = oddstart
                maxlen += 2
            elif evenstart >= 0 and even == even[::-1]:
                start = evenstart
                maxlen += 1
        return s[start:start+maxlen]
                    
